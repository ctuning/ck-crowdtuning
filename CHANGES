* 2016.02.18 * first version of the online classification of the workloads vs distinct optimizations
               aka online learning or active learning (see our CPC'15 paper)

* 2016.02.17 * adding dimension reduction to pipeline 
               (leaving only influential optimizations + inverting and turning off all if needed)
               very important for proper collaborative machine learning
             * changed platform.accelerator -> platform.gpu

* 2016.02.13 * adding flags: llvm,gcc,opencl,bugs to search specific crowdsourcing scenarios
             * starting pruning of solutions (flags, etc)

* 2016.02.12 * adding replay function (still need to add final check/classification of a computational species)
             * added graph of reactions to optimizations

* 2016.02.10 * adding support to crowdtuning arch specific flags 
               (for example, ARM specific flags in GCC and LLVM
                when collaboratively optimizing Android mobile devices)

* 2016.02.09 * adding first LLVM crowdtuning strategies

* 2016.02.05 * various small fixes and enhancements for experiment replay

* 2016.02.04 * adding dependency on repo 'ck-crowdtuning-platforms' 
               to share CPU/GPU/OS/platform feature for collaborative machine learning
             * adding graph of speedups during crowdtuning

* 2016.02.03 * adding ck.type_long for Python2/3 compatibility

* 2016.02.02 * Major engine update with various GCC autotuning scenarios. 
               New crowd-tuning including LLVM/OpenCL is on the way...

* 2016.01.15 * GCC crowd-tuning (up to speed up with margins)
             * Adding repo dependency on ck-web (to visualize results)

* 2016.01.04 * adding submit function from mobile device during crowd-tuning

* 2016.01.02 * adding test function to check CK server from remote (for example from mobile phones when crowdsourcing SW/HW optimization)

* 2015.12.18 * adding dummy modules for compiler flag crowdtuning/pruning and crowdsourcing OpenCL algorithm tuning

